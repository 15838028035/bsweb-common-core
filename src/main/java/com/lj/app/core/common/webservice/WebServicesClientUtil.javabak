package com.lj.app.core.common.webservice;

import java.io.ByteArrayInputStream;
import java.net.URL;
import java.util.Map;

import javax.xml.namespace.QName;

import org.apache.axis.client.Call;
import org.apache.axis.client.Service;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;


@SuppressWarnings("unchecked")
public class WebServicesClientUtil {
	private static Log logger = LogFactory.getLog(WebServicesClientUtil.class);

	// ServicesURL:ServicesURL
	// SerVicesName:服务名称
	// ReqName：请求参数名称
	// ReqValue：请求参数值
	// RspName：响应参数名
	public static String CallServices(String ServicesURL, String SerVicesName,
			String ReqName, String ReqValue, String RspName) throws Exception {
		try {
			Map output;
			Call call = (Call) new Service().createCall();

			// String endpoint_0 = endpoint + "/QueryAppRoleSoap";
			String _ServicesURL = ServicesURL + "/" + SerVicesName;
			call.setTargetEndpointAddress(new URL(_ServicesURL));
			call.setOperationName(new QName(SerVicesName, SerVicesName));
			call.addParameter(ReqName, org.apache.axis.Constants.XSD_STRING,
					javax.xml.rpc.ParameterMode.IN);
			call.setReturnType(org.apache.axis.Constants.XSD_STRING);
			call.setEncodingStyle("UTF-8");

			Object responseWS_role = call.invoke(new Object[] { ReqValue });
			// Debug.log("=====Receiving response=====: " + (String)
			// responseWS_role);
			output = call.getOutputParams();
			String RspValue;
			try {
				RspValue = (String) output.get(new QName("", RspName));
			} catch (Exception _exception) {
				RspValue = (String) org.apache.axis.utils.JavaUtils.convert(
						output.get(new QName("", RspName)),
						java.lang.String.class);
			}

			logger.warn("=====RspValue==11===: " + RspValue);
			if (RspValue == null)
				RspValue = (String) responseWS_role;

			logger.warn("=====RspValue==22===: " + RspValue);
			return RspValue;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw ex;
		}
	}

	public static String CallServices(String ServicesURL, String SerVicesName,
			String methodName, String ReqName, String ReqValue, String RspName)
			throws Exception {
		try {
			Map output;
			Call call = (Call) new Service().createCall();

			// String endpoint_0 = endpoint + "/QueryAppRoleSoap";
			String _ServicesURL = ServicesURL + "/" + SerVicesName;
			call.setTargetEndpointAddress(new URL(_ServicesURL));
			call.setOperationName(new QName(SerVicesName, methodName));
			call.addParameter(ReqName, org.apache.axis.Constants.XSD_STRING,
					javax.xml.rpc.ParameterMode.IN);
			call.setReturnType(org.apache.axis.Constants.XSD_STRING);
			call.setEncodingStyle("UTF-8");

			Object responseWS_role = call.invoke(new Object[] { ReqValue });
			// Debug.log("=====Receiving response=====: " + (String)
			// responseWS_role);
			output = call.getOutputParams();
			String RspValue;
			try {
				RspValue = (String) output.get(new QName("", RspName));
			} catch (Exception _exception) {
				RspValue = (String) org.apache.axis.utils.JavaUtils.convert(
						output.get(new QName("", RspName)),
						java.lang.String.class);
			}

			if (RspValue == null)
				RspValue = (String) responseWS_role;

			// Debug.log("=====RspValue=====: " + RspValue);
			return RspValue;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw ex;
		}
	}


	// ServicesURL:ServicesURL
	// namespaceURI:命名空间
	// SerVicesName:服务名称
	// ReqName：请求参数名称
	// ReqValue：请求参数值
	// RspName：响应参数名
	public static String CallCommonServices(String ServicesURL,
			String namespaceURI, String SerVicesName, String ReqName, String ReqValue, String RspName)
			throws Exception {
		try {
			Map output;
			Call call = (Call) new Service().createCall();

			call.setTimeout(180 * 1000);// 3分钟

			String _ServicesURL = ServicesURL;
			call.setTargetEndpointAddress(new URL(_ServicesURL));
			call.setOperationName(new QName(namespaceURI, SerVicesName));
			call.addParameter(ReqName, org.apache.axis.Constants.XSD_STRING,
					javax.xml.rpc.ParameterMode.IN);
			call.setReturnType(org.apache.axis.Constants.XSD_STRING);
			call.setEncodingStyle("UTF-8");

			Object responseWS_role = call.invoke(new Object[] { ReqValue });
			// Debug.log("=====Receiving response=====: " + (String)
			// responseWS_role);
			output = call.getOutputParams();
			String RspValue;
			try {
				RspValue = (String) output.get(new QName("", RspName));
			} catch (Exception _exception) {
				RspValue = (String) org.apache.axis.utils.JavaUtils.convert(
						output.get(new QName("", RspName)),
						java.lang.String.class);
			}

			if (RspValue == null)
				RspValue = (String) responseWS_role;

			// Debug.log("=====RspValue=====: " + RspValue);
			return RspValue;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw ex;
		}
	}
	
	// ServicesURL:ServicesURL
	// SerVicesName:服务名称
	// ReqName：请求参数名称
	// ReqValue：请求参数值
	// RspName：响应参数名
	public static String CallCommonServices(String ServicesURL,
			String SerVicesName, String ReqName, String ReqValue, String RspName)
					throws Exception {
		try {
			Map output;
			Call call = (Call) new Service().createCall();
			
			call.setTimeout(180 * 1000);// 3分钟
			
			String _ServicesURL = ServicesURL;
			call.setTargetEndpointAddress(new URL(_ServicesURL));
			call.setOperationName(new QName(SerVicesName, SerVicesName));
			call.addParameter(ReqName, org.apache.axis.Constants.XSD_STRING,
					javax.xml.rpc.ParameterMode.IN);
			call.setReturnType(org.apache.axis.Constants.XSD_STRING);
			call.setEncodingStyle("UTF-8");
			
			Object responseWS_role = call.invoke(new Object[] { ReqValue });
			// Debug.log("=====Receiving response=====: " + (String)
			// responseWS_role);
			output = call.getOutputParams();
			String RspValue;
			try {
				RspValue = (String) output.get(new QName("", RspName));
			} catch (Exception _exception) {
				RspValue = (String) org.apache.axis.utils.JavaUtils.convert(
						output.get(new QName("", RspName)),
						java.lang.String.class);
			}
			
			if (RspValue == null)
				RspValue = (String) responseWS_role;
			
			// Debug.log("=====RspValue=====: " + RspValue);
			return RspValue;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw ex;
		}
	}
	
	// 调用超长时间返回WEB服务
	// ServicesURL:ServicesURL
	// SerVicesName:服务名称
	// ReqName：请求参数名称
	// ReqValue：请求参数值
	// RspName：响应参数名
	public static String CallLongTimeServices(String ServicesURL,
			String SerVicesName, String ReqName, String ReqValue, String RspName)
			throws Exception {
		try {
			Map output;
			Call call = (Call) new Service().createCall();

			call.setTimeout(5 * 60 * 60 * 1000);// 5个小时

			String _ServicesURL = ServicesURL;
			call.setTargetEndpointAddress(new URL(_ServicesURL));
			call.setOperationName(new QName(SerVicesName, SerVicesName));
			call.addParameter(ReqName, org.apache.axis.Constants.XSD_STRING,
					javax.xml.rpc.ParameterMode.IN);
			call.setReturnType(org.apache.axis.Constants.XSD_STRING);
			call.setEncodingStyle("UTF-8");

			Object responseWS_role = call.invoke(new Object[] { ReqValue });
			// Debug.log("=====Receiving response=====: " + (String)
			// responseWS_role);
			output = call.getOutputParams();
			String RspValue;
			try {
				RspValue = (String) output.get(new QName("", RspName));
			} catch (Exception _exception) {
				RspValue = (String) org.apache.axis.utils.JavaUtils.convert(
						output.get(new QName("", RspName)),
						java.lang.String.class);
			}

			if (RspValue == null)
				RspValue = (String) responseWS_role;

			// Debug.log("=====RspValue=====: " + RspValue);
			return RspValue;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw ex;
		}
	}

	public static String CallCommonServicesByTime(String ServicesURL,
			String SerVicesName, String ReqName, String ReqValue,
			String RspName, String timeOut) throws Exception {
		try {
			Map output;
			Call call = (Call) new Service().createCall();

			call.setTimeout(Integer.valueOf(timeOut)*1000);

			String _ServicesURL = ServicesURL;
			call.setTargetEndpointAddress(new URL(_ServicesURL));
			call.setOperationName(new QName(SerVicesName, SerVicesName));
			call.addParameter(ReqName, org.apache.axis.Constants.XSD_STRING,
					javax.xml.rpc.ParameterMode.IN);
			call.setReturnType(org.apache.axis.Constants.XSD_STRING);
			call.setEncodingStyle("UTF-8");

			Object responseWS_role = call.invoke(new Object[] { ReqValue });
			// Debug.log("=====Receiving response=====: " + (String)
			// responseWS_role);
			output = call.getOutputParams();
			String RspValue;
			try {
				RspValue = (String) output.get(new QName("", RspName));
			} catch (Exception _exception) {
				RspValue = (String) org.apache.axis.utils.JavaUtils.convert(
						output.get(new QName("", RspName)),
						java.lang.String.class);
			}

			if (RspValue == null)
				RspValue = (String) responseWS_role;

			// Debug.log("=====RspValue=====: " + RspValue);
			return RspValue;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw ex;
		}
	}
}